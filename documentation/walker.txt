
Pseudo code for file system walker.

Overall goal is to iterate over $backup_dirs and notice any deleted, modified, or created
files/directories.  Then build a queue of the changed files sorted by inode.  

First note the time of the start of the backup.

So something like this python code to talk a dir:

// interate through the directory array
for i < len(dirArray)
{
	// inside add_dir_to_sql should only insert if dir isn't in sql
	add_dir_to_sql(i)

	// build list of files in this directory
	d, err := os.Open(dirname)
	fi, err := d.Readdir(-1)

	// build list of files from sql
	sqlList  = get_list_of_files_in_dir(i)

	// iterate over list of files in current directory
	for _, fi := range fi {
		if !fi.IsDir() {
			// compare the local modified time for this file to the one in sql
			if fi.Modified_time > sqlList(fi.Name().ModifiedTime)
				insert_local_file_meta_data_into_sql(...)
			}
		} else {
			// if dir isn't in sql add it 
			// if dir isn't in dirArray append it.
		}
	}
}




Once done the encryption queue should be sorted by inode.

Then addDir and addFile are functions that compare what's on the filesystem with what is
in the database:
* BOTH addFile and addDir update last_seen for EVERYTHING it sees.
* NEVER modify a file or directory with metadata from stat, ALWAYS insert.
* Add directory to SQL if missing or modified.
* Adds file to sql if missing,modified metadata, or modified conetns, and queue it for encryption

One key step is that after the above any file with last_seen older than
the start of the current backup must have been deleted and that needs
to be noted.

Something like:
update files set deleted=TRUE where deleted=FALSE and last_seen < $start_of_backup.



 
